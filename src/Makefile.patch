--- Makefile.std	2021-12-08 23:54:15.170442875 +0100
+++ Makefile	2021-12-08 23:55:21.882944494 +0100
@@ -10,173 +10,53 @@
 
 # Usage:
 # make          ... build main binary
-# make test     ... build and run unit tests
-# make archive  ... create final archive
 # make clean    ... remove temporary files
-# make cleanall ... remove all generated temp files
-
-# Used environment variables:
-# EXTRA_CFLAGS - additional flags for the C compiler
 
 # Used magic variables:
 # $< ... first dependency
-# $^ ... all dependencies
 # $@ ... target
-# $* ... % from rule header
 
 BINARY_NAME=ifj21_compiler
-DOC_NAME=main
-
-# Project sources
-SRC_P=.
-# Test sources (U = Unit, M = Manual)
-U_TEST_P=../test/unit
-M_TEST_P=../test/manual
-# Directories with build data
-BIN_P=../build/bin
-DEP_P=../build/deps
-OBJ_P=../build/objs
-RES_P=../build/results
-RUN_P=../build/runners
-# Unity test framework
-UNITY_P=../unity
-
-# Test statistics
-IGNORED_TESTS = `grep -qs IGNORE $(RES_P)/*.txt && grep -s IGNORE $(RES_P)/*.txt | sed -E 's|$(RES_P)/[a-zA-Z0-9_]+\.txt:../||g' || echo "There are no ignored tests"`
-PASSED_TESTS = `grep -qs PASS $(RES_P)/*.txt && grep PASS $(RES_P)/*.txt | sed -E 's|$(RES_P)/[a-zA-Z_]+\.txt:../||g' || echo "There are no passed tests"`
-FAILED_TESTS = `grep -qs FAIL[^E] $(RES_P)/*.txt && grep FAIL[^E] $(RES_P)/*.txt | sed -E 's|$(RES_P)/[a-zA-Z_]+\.txt:../||g' || echo "There are no failed tests"`
 
 # Compiler configs
 CC=gcc-10.2
-LINKER=ld
-CFLAGS=-std=c11 -g -pedantic -Wall -Wextra $$EXTRA_CFLAGS
+CFLAGS=-std=c11 -g -pedantic -Wall -Wextra
 
 # Get a list of all source files (ex.: SRC_P/main.c SRC_P/symtable.c)
-SRC_FILES=$(wildcard $(SRC_P)/*.c)
+SRC_FILES=$(wildcard *.c)
 # Get a list of all header files (ex.: SRC_P/token.h SRC_P/symtable.h)
-HDR_FILES=$(wildcard $(SRC_P)/*.h)
+HDR_FILES=$(wildcard *.h)
 # Transform the list of source files into a list of modules
 # It's done by substitution - every *.c file creates one object one (*.o),
 # so we can just change extension and path and we're done
-MODULES=$(patsubst $(SRC_P)/%.c, $(OBJ_P)/%.o, $(SRC_FILES))
-# Get a list of all unit test source files (similar to SRC_FILES)
-U_TEST_FILES=$(wildcard $(U_TEST_P)/test_*.c)
-# Get a list of all manual test source files (similar to SRC_FILES and U_TEST_FILES)
-M_TEST_FILES=$(wildcard $(M_TEST_P)/test_*.c)
-# Transform the list of unit tests' source files into a list of test output files (similar to MODULES)
-U_TEST_OUTPUTS=$(patsubst $(U_TEST_P)/%.c, $(RES_P)/%.txt, $(U_TEST_FILES))
-# Transform the list of manual tests' source files into a list of their binaries (similar to MODULES)
-M_TESTS_BINS=$(patsubst $(M_TEST_P)/test_%.c, $(BIN_P)/%.mantest, $(M_TEST_FILES))
+MODULES=$(patsubst %.c, %.o, $(SRC_FILES))
 
 # Define virtual files
-.PHONY: all test mantest archive clean cleanall
+.PHONY: all clean cleanall
 
 # `make` only compiles main binary
-all: $(BIN_P)/$(BINARY_NAME)
+all: $(BINARY_NAME)
 
 # Template for compiling modules
 # This is used for generated rules in dep-*.list
-$(OBJ_P)/%.o: $(SRC_P)/%.c
+%.o: %.c
 	$(CC) $(CFLAGS) -c $< -o $@
 
 # Link modules into final binary
-$(BIN_P)/$(BINARY_NAME): $(DEP_P)/dep-src.list $(MODULES)
+$(BINARY_NAME): dep-src.list $(MODULES)
 	$(CC) $(CFLAGS) $(MODULES) -o $@
 
 #######################################
 # Generate module dependencies
-$(DEP_P)/dep-src.list: $(SRC_FILES) $(HDR_FILES)
-	$(SRC_P)/get-dependency-list.sh $(SRC_P) $(OBJ_P) >$@
-
-$(DEP_P)/dep-u-test.list: $(U_TEST_FILES)
-	$(U_TEST_P)/get-dependency-list.sh $(U_TEST_P) $(OBJ_P) >$@
-
-$(DEP_P)/dep-m-test.list: $(M_TEST_FILES)
-	$(M_TEST_P)/get-dependency-list.sh $(M_TEST_P) $(OBJ_P) $(BIN_P) >$@
+dep-src.list: $(SRC_FILES) $(HDR_FILES)
+	$(CC) -MM $(SRC_FILES) >$@
 
--include $(DEP_P)/dep-src.list
--include $(DEP_P)/dep-u-test.list
--include $(DEP_P)/dep-m-test.list
+-include dep-src.list
 #######################################
 
-# Prepare and run tests
-test: $(U_TEST_OUTPUTS)
-	@echo '--------------------------'
-	@echo '          IGNORE          '
-	@echo '--------------------------'
-	@echo "$(IGNORED_TESTS)"
-	@echo ''
-	@echo '--------------------------'
-	@echo '          PASSED          '
-	@echo '--------------------------'
-	@echo "$(PASSED_TESTS)"
-	@echo ''
-	@echo '--------------------------'
-	@echo '          FAILED          '
-	@echo '--------------------------'
-	@echo "$(FAILED_TESTS)"
-
-# Generate test results
-$(RES_P)/test_%.txt: $(BIN_P)/test_% $(DEP_P)/dep-u-test.list
-	-./$< >$@ 2>&1
-
-# Create unit tests' binaries (link prepared obj files together and append C std lib)
-$(BIN_P)/test_%: $(OBJ_P)/unity.o $(OBJ_P)/unity_memory.o $(OBJ_P)/test_%_runner.o $(OBJ_P)/test_%_final.o
-	$(CC) $^ -o $@
-
-# Linking unit tests' modules' objects with their dependencies
-$(OBJ_P)/test_%_final.o: $(OBJ_P)/test_%.o $(MODULES)
-	$(LINKER) -r -o $@ $(shell $(U_TEST_P)/get-dependency-list.sh $(U_TEST_P) $(OBJ_P) $@)
-
-# Compile unit tests' modules
-$(OBJ_P)/test_%.o: $(U_TEST_P)/test_%.c
-	$(CC) $(CFLAGS) -c $< -o $@ -DTEST
-
-# Compile unit test runners' modules
-$(OBJ_P)/%_runner.o: $(RUN_P)/%_runner.c
-	$(CC) $(CFLAGS) -c $< -o $@ -DTEST
-
-# Generate unit test runners' source code
-$(RUN_P)/%_runner.c: $(U_TEST_P)/%.c
-	ruby $(UNITY_P)/auto/generate_test_runner.rb $< $@
-
-# Compile Unity framework's main module
-$(OBJ_P)/unity.o: $(UNITY_P)/src/unity.c $(UNITY_P)/src/unity.h
-	$(CC) $(CFLAGS) -c $< -o $@ -DUNITY_INCLUDE_CONFIG_H
-
-# Compile Unity framework's memory add-on module
-$(OBJ_P)/unity_memory.o: $(UNITY_P)/extras/unity_memory.c $(UNITY_P)/extras/unity_memory.h
-	$(CC) $(CFLAGS) -c $< -o $@
-
-# Don't delete results of explicit rules at the end of rule processing
-.PRECIOUS: $(RUN_P)/%_runner.c
-.PRECIOUS: $(OBJ_P)/%_runner.o
-.PRECIOUS: $(OBJ_P)/test_%.o
-.PRECIOUS: $(BIN_P)/test_%
-.PRECIOUS: $(RES_P)/test_%.txt
-
-# Build manual tests
-mantest: $(M_TESTS_BINS)
-	@echo "-----------------------"
-	@echo "Available manual tests:"
-	@echo "$(M_TESTS_BINS)" | sed -E 's/ /- /' | sed -E 's/  /\n- /g'
-
-# Create manual tests' binaries (link prepared obj files together and append C std lib)
-$(BIN_P)/%.mantest: $(OBJ_P)/mantest_%.o $(MODULES)
-	$(CC) $(CFLAGS) -o $@ $(shell $(M_TEST_P)/get-dependency-list.sh $(M_TEST_P) $(OBJ_P) $(BIN_P) $(OBJ_P)/mantest_$*.o)
-
-# Compile manual tests' modules
-$(OBJ_P)/mantest_%.o: $(M_TEST_P)/test_%.c
-	$(CC) $(CFLAGS) -c $< -o $@
-
-.PRECIOUS: $(OBJ_P)/mantest_%.o
-
-# Create final archive
-archive:
-	../create-archive.sh $(DOC_NAME)
-
 # Cleaning stuff
 clean:
-	rm -f *.c~ *.h~
+	rm -f *.o *.c~ *.h~ xsmahe01.tgz
+
 cleanall: clean
-	rm -f $(BIN_P)/* $(DEP_P)/* $(OBJ_P)/* $(RES_P)/* $(RUN_P)/* ../xsmahe01.tgz
+	rm -f $(BINARY_NAME) dep-src.list
