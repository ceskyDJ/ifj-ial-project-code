Testing and developing here: https://www.cs.princeton.edu/courses/archive/spring20/cos320/LL1/

Dictionary:
    SEQ ... sequence
    E/e .. expression
    RET ... return
    FUN ... function
    '' ... epsilon
    DEC ... declaration
    DEF ... definition
    id ... identifier
    STMT ... statement

starting non-terminal: PROG
--- paste what is below to the simulator ---

1: PROG ::= REQUIRE CODE

2: REQUIRE ::= require "ifj21"

3: CODE ::= CODE' CODE''
4: CODE ::= ''
5: CODE' ::= FUN_DEC
6: CODE' ::= FUN_DEF
7: CODE' ::= CALL
8: CODE'' ::= CODE' CODE''
9: CODE'' ::= ''

10: FUN_DEC ::= global id : FUN_SIGNATURE
11: FUN_SIGNATURE ::= function ( TYPE_LIST ) FUN_RET
12: TYPE_LIST::= TYPE TYPE_LIST'
13: TYPE_LIST::= ''
14: TYPE_LIST' ::= , TYPE TYPE_LIST'
15: TYPE_LIST' ::= ''
16: FUN_RET ::= : FUN_RET_LIST
17: FUN_RET ::= ''

18: CALL ::= id ( TERM_SEQ )

19: TERM_SEQ ::= TERM TERM_SEQ'
20: TERM_SEQ ::= ''
21: TERM_SEQ' ::= , TERM TERM_SEQ'
22: TERM_SEQ' ::= ''

23: FUN_RET_LIST ::= TYPE FUN_RET_LIST'
24: FUN_RET_LIST' ::= , TYPE FUN_RET_LIST'
25: FUN_RET_LIST' ::= ''

26: RET_STMT ::= return RET_E_LIST
27: RET_E_LIST ::= E_LIST
28: RET_E_LIST ::= ''

29: FUN_DEF ::= function id ( PARAM_LIST ) FUN_RET BODY end
30: PARAM_LIST ::= PARAM PARAM'
31: PARAM_LIST ::= ''
32: PARAM ::= id : TYPE
33: PARAM' ::= , PARAM PARAM'
34: PARAM' ::= ''

35: BODY ::= BODY' BODY''
36: BODY ::= ''
37: BODY' ::= VAR_DEC_DEF
38: BODY' ::= STMT
39: BODY' ::= IF
40: BODY' ::= WHILE
41: BODY' ::= RET_STMT
42: BODY' ::= CALL
43: BODY'' ::= BODY' BODY''
44: BODY'' ::= ''

45: TERM ::= id
46: TERM ::= integer
47: TERM ::= number
48: TERM ::= string
49: TERM ::= nil

50: VAR_DEC_DEF ::= VAR_DEC VAR_ASSIGN
51: VAR_DEC ::= local id : TYPE
52: TYPE ::= integer
53: TYPE ::= number
54: TYPE ::= string
55: VAR_ASSIGN ::= = e
56: VAR_ASSIGN ::= ''

57: STMT ::= ID_SEQ = E_LIST/CALL
58: ID_SEQ ::= id ID_SEQ'
59: ID_SEQ' ::= , id ID_SEQ'
60: ID_SEQ' ::= ''

61: E_LIST ::= e E'
62: E' ::= , e E'
63: E' ::= ''

64: IF ::= if e then BODY else BODY end

65: WHILE ::= while e do BODY end

